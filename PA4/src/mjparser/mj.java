
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 03 10:30:14 EDT 2019
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 03 10:30:14 EDT 2019
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\007\000\002\031" +
    "\004\000\002\031\002\000\002\035\002\000\002\036\002" +
    "\000\002\027\025\000\002\030\010\000\002\024\004\000" +
    "\002\024\002\000\002\023\015\000\002\010\005\000\002" +
    "\010\002\000\002\022\003\000\002\022\005\000\002\022" +
    "\002\000\002\021\004\000\002\020\004\000\002\020\002" +
    "\000\002\017\005\000\002\026\004\000\002\026\002\000" +
    "\002\025\005\000\002\025\013\000\002\025\007\000\002" +
    "\025\007\000\002\025\011\000\002\025\007\000\002\025" +
    "\011\000\002\025\011\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\011\003\000\002" +
    "\011\005\000\002\011\002\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\006\000\002\007\010\000\002\007\004\000" +
    "\002\007\006\000\002\007\005\000\002\007\004\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\006" +
    "\000\002\007\005\000\002\007\003\000\002\007\010\000" +
    "\002\007\003\000\002\034\002\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\017\005\001\002\000\004\002\243\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\221\001\002\000" +
    "\006\002\ufffe\037\ufffe\001\002\000\006\002\000\037\014" +
    "\001\002\000\006\002\uffff\037\uffff\001\002\000\004\061" +
    "\015\001\002\000\004\011\016\001\002\000\024\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\032\uffef\036\uffef\047\uffef\050" +
    "\uffef\051\uffef\001\002\000\024\012\ufff8\013\023\014\021" +
    "\015\031\032\ufff8\036\024\047\027\050\026\051\025\001" +
    "\002\000\076\005\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\020\ufff0\025\ufff0\026\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\036\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\001\002" +
    "\000\004\061\uffdf\001\002\000\006\012\035\032\036\001" +
    "\002\000\004\061\uffe2\001\002\000\004\061\uffde\001\002" +
    "\000\004\061\uffdd\001\002\000\004\061\uffe1\001\002\000" +
    "\004\061\uffe0\001\002\000\004\061\032\001\002\000\004" +
    "\061\uffe3\001\002\000\004\044\033\001\002\000\076\005" +
    "\uffee\007\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\020\uffee\025\uffee\026\uffee\031\uffee\032\uffee\033\uffee\036" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\067\uffee\001\002\000\006\012\ufff9" +
    "\032\ufff9\001\002\000\006\002\ufffa\037\ufffa\001\002\000" +
    "\020\013\023\014\021\015\031\036\024\047\027\050\026" +
    "\051\025\001\002\000\004\061\040\001\002\000\004\007" +
    "\041\001\002\000\024\010\ufff2\013\023\014\021\015\031" +
    "\027\ufff2\036\024\047\027\050\026\051\025\001\002\000" +
    "\006\010\ufff4\027\ufff4\001\002\000\004\061\220\001\002" +
    "\000\006\010\046\027\045\001\002\000\020\013\023\014" +
    "\021\015\031\036\024\047\027\050\026\051\025\001\002" +
    "\000\004\011\047\001\002\000\074\005\uffef\007\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\020\uffef\025\uffef" +
    "\026\uffef\031\uffef\033\uffef\036\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef" +
    "\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067" +
    "\uffef\001\002\000\074\005\uffec\007\uffec\011\uffec\012\uffec" +
    "\013\023\014\021\015\031\020\uffec\025\uffec\026\uffec\031" +
    "\uffec\033\uffec\036\024\047\027\050\026\051\025\052\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\001\002" +
    "\000\056\005\075\007\065\011\063\012\ufff5\020\062\025" +
    "\055\026\054\031\077\033\056\052\071\054\052\055\100" +
    "\056\101\057\073\060\070\061\066\062\060\063\074\064" +
    "\072\065\076\066\061\067\067\001\002\000\004\007\211" +
    "\001\002\000\056\005\uffed\007\uffed\011\uffed\012\uffed\020" +
    "\uffed\025\uffed\026\uffed\031\uffed\033\uffed\052\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\001\002\000\004" +
    "\007\205\001\002\000\036\005\075\007\065\025\055\031" +
    "\077\056\101\057\073\060\070\061\066\062\060\063\074" +
    "\064\072\065\076\066\061\067\067\001\002\000\036\005" +
    "\075\007\065\025\055\031\077\056\101\057\073\060\070" +
    "\061\066\062\060\063\074\064\072\065\076\066\061\067" +
    "\067\001\002\000\020\004\107\005\111\006\112\022\105" +
    "\023\110\024\106\030\174\001\002\000\026\004\uffce\005" +
    "\uffce\006\uffce\010\uffce\022\uffce\023\uffce\024\uffce\027\uffce" +
    "\030\uffce\044\uffce\001\002\000\026\004\uffc9\005\uffc9\006" +
    "\uffc9\010\uffc9\022\uffc9\023\uffc9\024\uffc9\027\uffc9\030\uffc9" +
    "\044\uffc9\001\002\000\004\007\166\001\002\000\054\005" +
    "\uffec\007\uffec\011\uffec\012\uffec\020\uffec\025\uffec\026\uffec" +
    "\031\uffec\052\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\001\002\000\004\012\163\001\002\000\040\005" +
    "\075\007\065\015\157\025\055\031\077\056\101\057\073" +
    "\060\070\061\066\062\060\063\074\064\072\065\076\066" +
    "\061\067\067\001\002\000\026\004\uffc4\005\uffc4\006\uffc4" +
    "\010\uffc4\022\uffc4\023\uffc4\024\uffc4\027\uffc4\030\uffc4\044" +
    "\uffc4\001\002\000\026\004\uffc6\005\uffc6\006\uffc6\010\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\027\uffc6\030\uffc6\044\uffc6\001" +
    "\002\000\026\004\uffcc\005\uffcc\006\uffcc\010\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\027\uffcc\030\uffcc\044\uffcc\001\002\000" +
    "\004\007\146\001\002\000\026\004\uffca\005\uffca\006\uffca" +
    "\010\uffca\022\uffca\023\uffca\024\uffca\027\uffca\030\uffca\044" +
    "\uffca\001\002\000\004\007\143\001\002\000\026\004\uffcd" +
    "\005\uffcd\006\uffcd\010\uffcd\022\uffcd\023\uffcd\024\uffcd\027" +
    "\uffcd\030\uffcd\044\uffcd\001\002\000\036\005\075\007\065" +
    "\025\055\031\077\056\101\057\073\060\070\061\066\062" +
    "\060\063\074\064\072\065\076\066\061\067\067\001\002" +
    "\000\026\004\uffcb\005\uffcb\006\uffcb\010\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\027\uffcb\030\uffcb\044\uffcb\001\002\000\004" +
    "\061\137\001\002\000\004\007\133\001\002\000\004\007" +
    "\102\001\002\000\036\005\075\007\065\025\055\031\077" +
    "\056\101\057\073\060\070\061\066\062\060\063\074\064" +
    "\072\065\076\066\061\067\067\001\002\000\022\004\107" +
    "\005\111\006\112\022\105\023\110\024\106\027\104\030" +
    "\113\001\002\000\036\005\075\007\065\025\055\031\077" +
    "\056\101\057\073\060\070\061\066\062\060\063\074\064" +
    "\072\065\076\066\061\067\067\001\002\000\036\005\075" +
    "\007\065\025\055\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\074\064\072\065\076\066\061\067\067" +
    "\001\002\000\036\005\075\007\065\025\055\031\077\056" +
    "\101\057\073\060\070\061\066\062\060\063\074\064\072" +
    "\065\076\066\061\067\067\001\002\000\036\005\075\007" +
    "\065\025\055\031\077\056\101\057\073\060\070\061\066" +
    "\062\060\063\074\064\072\065\076\066\061\067\067\001" +
    "\002\000\036\005\075\007\065\025\055\031\077\056\101" +
    "\057\073\060\070\061\066\062\060\063\074\064\072\065" +
    "\076\066\061\067\067\001\002\000\036\005\075\007\065" +
    "\025\055\031\077\056\101\057\073\060\070\061\066\062" +
    "\060\063\074\064\072\065\076\066\061\067\067\001\002" +
    "\000\036\005\075\007\065\025\055\031\077\056\101\057" +
    "\073\060\070\061\066\062\060\063\074\064\072\065\076" +
    "\066\061\067\067\001\002\000\004\061\114\001\002\000" +
    "\004\007\115\001\002\000\042\005\075\007\065\010\uffda" +
    "\025\055\027\uffda\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\074\064\072\065\076\066\061\067\067" +
    "\001\002\000\024\004\107\005\111\006\112\010\uffdc\022" +
    "\105\023\110\024\106\027\uffdc\030\113\001\002\000\006" +
    "\010\121\027\120\001\002\000\036\005\075\007\065\025" +
    "\055\031\077\056\101\057\073\060\070\061\066\062\060" +
    "\063\074\064\072\065\076\066\061\067\067\001\002\000" +
    "\026\004\uffc5\005\uffc5\006\uffc5\010\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\027\uffc5\030\uffc5\044\uffc5\001\002\000\024\004" +
    "\107\005\111\006\112\010\uffdb\022\105\023\110\024\106" +
    "\027\uffdb\030\113\001\002\000\026\004\uffd9\005\uffd9\006" +
    "\uffd9\010\uffd9\022\uffd9\023\uffd9\024\uffd9\027\uffd9\030\113" +
    "\044\uffd9\001\002\000\026\004\uffd8\005\uffd8\006\112\010" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\027\uffd8\030\113\044\uffd8" +
    "\001\002\000\026\004\107\005\111\006\112\010\uffd5\022" +
    "\105\023\uffd5\024\uffd5\027\uffd5\030\113\044\uffd5\001\002" +
    "\000\026\004\uffd7\005\uffd7\006\112\010\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\027\uffd7\030\113\044\uffd7\001\002\000\026" +
    "\004\107\005\111\006\112\010\uffd6\022\105\023\110\024" +
    "\uffd6\027\uffd6\030\113\044\uffd6\001\002\000\026\004\107" +
    "\005\111\006\112\010\uffc7\022\uffc7\023\uffc7\024\uffc7\027" +
    "\uffc7\030\113\044\uffc7\001\002\000\022\004\107\005\111" +
    "\006\112\010\132\022\105\023\110\024\106\030\113\001" +
    "\002\000\026\004\uffd3\005\uffd3\006\uffd3\010\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\027\uffd3\030\uffd3\044\uffd3\001\002\000" +
    "\036\005\075\007\065\025\055\031\077\056\101\057\073" +
    "\060\070\061\066\062\060\063\074\064\072\065\076\066" +
    "\061\067\067\001\002\000\022\004\107\005\111\006\112" +
    "\010\135\022\105\023\110\024\106\030\113\001\002\000" +
    "\004\044\136\001\002\000\060\005\uffe9\007\uffe9\011\uffe9" +
    "\012\uffe9\020\uffe9\021\uffe9\025\uffe9\026\uffe9\031\uffe9\033" +
    "\uffe9\052\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\001\002\000\004\007\140\001\002\000\004\010\141" +
    "\001\002\000\026\004\uffc8\005\uffc8\006\uffc8\010\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8\044\uffc8\001\002" +
    "\000\026\004\uffcf\005\uffcf\006\uffcf\010\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\027\uffcf\030\113\044\uffcf\001\002\000\036" +
    "\005\075\007\065\025\055\031\077\056\101\057\073\060" +
    "\070\061\066\062\060\063\074\064\072\065\076\066\061" +
    "\067\067\001\002\000\022\004\107\005\111\006\112\010" +
    "\145\022\105\023\110\024\106\030\113\001\002\000\026" +
    "\004\uffd4\005\uffd4\006\uffd4\010\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\027\uffd4\030\uffd4\044\uffd4\001\002\000\036\005\075" +
    "\007\065\025\055\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\074\064\072\065\076\066\061\067\067" +
    "\001\002\000\022\004\107\005\111\006\112\022\105\023" +
    "\110\024\106\027\150\030\113\001\002\000\036\005\075" +
    "\007\065\025\055\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\074\064\072\065\076\066\061\067\067" +
    "\001\002\000\022\004\107\005\111\006\112\022\105\023" +
    "\110\024\106\027\152\030\113\001\002\000\036\005\075" +
    "\007\065\025\055\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\074\064\072\065\076\066\061\067\067" +
    "\001\002\000\022\004\107\005\111\006\112\010\154\022" +
    "\105\023\110\024\106\030\113\001\002\000\004\044\155" +
    "\001\002\000\060\005\uffea\007\uffea\011\uffea\012\uffea\020" +
    "\uffea\021\uffea\025\uffea\026\uffea\031\uffea\033\uffea\052\uffea" +
    "\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\001\002" +
    "\000\022\004\107\005\111\006\112\010\162\022\105\023" +
    "\110\024\106\030\113\001\002\000\004\010\160\001\002" +
    "\000\036\005\075\007\065\025\055\031\077\056\101\057" +
    "\073\060\070\061\066\062\060\063\074\064\072\065\076" +
    "\066\061\067\067\001\002\000\026\004\uffd1\005\uffd1\006" +
    "\uffd1\010\uffd1\022\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1" +
    "\044\uffd1\001\002\000\026\004\uffd0\005\uffd0\006\uffd0\010" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\027\uffd0\030\uffd0\044\uffd0" +
    "\001\002\000\006\012\ufff7\032\ufff7\001\002\000\054\005" +
    "\075\007\065\011\063\012\165\020\062\025\055\026\054" +
    "\031\077\052\071\054\052\055\100\056\101\057\073\060" +
    "\070\061\066\062\060\063\074\064\072\065\076\066\061" +
    "\067\067\001\002\000\060\005\uffeb\007\uffeb\011\uffeb\012" +
    "\uffeb\020\uffeb\021\uffeb\025\uffeb\026\uffeb\031\uffeb\033\uffeb" +
    "\052\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\001\002\000\036\005\075\007\065\025\055\031\077\056" +
    "\101\057\073\060\070\061\066\062\060\063\074\064\072" +
    "\065\076\066\061\067\067\001\002\000\022\004\107\005" +
    "\111\006\112\010\170\022\105\023\110\024\106\030\113" +
    "\001\002\000\052\005\075\007\065\011\063\020\062\025" +
    "\055\026\054\031\077\052\071\054\052\055\100\056\101" +
    "\057\073\060\070\061\066\062\060\063\074\064\072\065" +
    "\076\066\061\067\067\001\002\000\060\005\uffe8\007\uffe8" +
    "\011\uffe8\012\uffe8\020\uffe8\021\172\025\uffe8\026\uffe8\031" +
    "\uffe8\033\uffe8\052\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\001\002\000\052\005\075\007\065\011\063" +
    "\020\062\025\055\026\054\031\077\052\071\054\052\055" +
    "\100\056\101\057\073\060\070\061\066\062\060\063\074" +
    "\064\072\065\076\066\061\067\067\001\002\000\060\005" +
    "\uffe7\007\uffe7\011\uffe7\012\uffe7\020\uffe7\021\uffe7\025\uffe7" +
    "\026\uffe7\031\uffe7\033\uffe7\052\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7" +
    "\065\uffe7\066\uffe7\067\uffe7\001\002\000\004\061\175\001" +
    "\002\000\004\007\176\001\002\000\042\005\075\007\065" +
    "\010\uffda\025\055\027\uffda\031\077\056\101\057\073\060" +
    "\070\061\066\062\060\063\074\064\072\065\076\066\061" +
    "\067\067\001\002\000\006\010\200\027\120\001\002\000" +
    "\022\004\uffc5\005\uffc5\006\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\030\uffc5\044\201\001\002\000\060\005\uffe4\007\uffe4\011" +
    "\uffe4\012\uffe4\020\uffe4\021\uffe4\025\uffe4\026\uffe4\031\uffe4" +
    "\033\uffe4\052\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4" +
    "\067\uffe4\001\002\000\022\004\107\005\111\006\112\022" +
    "\105\023\110\024\106\030\113\044\203\001\002\000\004" +
    "\012\ufff6\001\002\000\026\004\uffd2\005\uffd2\006\uffd2\010" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\027\uffd2\030\113\044\uffd2" +
    "\001\002\000\036\005\075\007\065\025\055\031\077\056" +
    "\101\057\073\060\070\061\066\062\060\063\074\064\072" +
    "\065\076\066\061\067\067\001\002\000\022\004\107\005" +
    "\111\006\112\010\207\022\105\023\110\024\106\030\113" +
    "\001\002\000\052\005\075\007\065\011\063\020\062\025" +
    "\055\026\054\031\077\052\071\054\052\055\100\056\101" +
    "\057\073\060\070\061\066\062\060\063\074\064\072\065" +
    "\076\066\061\067\067\001\002\000\060\005\uffe6\007\uffe6" +
    "\011\uffe6\012\uffe6\020\uffe6\021\uffe6\025\uffe6\026\uffe6\031" +
    "\uffe6\033\uffe6\052\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6" +
    "\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\001\002\000\036\005\075\007\065\025\055" +
    "\031\077\056\101\057\073\060\070\061\066\062\060\063" +
    "\074\064\072\065\076\066\061\067\067\001\002\000\022" +
    "\004\107\005\111\006\112\022\105\023\110\024\106\027" +
    "\213\030\113\001\002\000\036\005\075\007\065\025\055" +
    "\031\077\056\101\057\073\060\070\061\066\062\060\063" +
    "\074\064\072\065\076\066\061\067\067\001\002\000\022" +
    "\004\107\005\111\006\112\010\215\022\105\023\110\024" +
    "\106\030\113\001\002\000\004\044\216\001\002\000\060" +
    "\005\uffe5\007\uffe5\011\uffe5\012\uffe5\020\uffe5\021\uffe5\025" +
    "\uffe5\026\uffe5\031\uffe5\033\uffe5\052\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000\006\010\ufff3" +
    "\027\ufff3\001\002\000\006\010\ufff1\027\ufff1\001\002\000" +
    "\004\011\ufffd\001\002\000\004\011\223\001\002\000\004" +
    "\032\224\001\002\000\004\034\225\001\002\000\004\036" +
    "\226\001\002\000\004\016\227\001\002\000\004\007\230" +
    "\001\002\000\004\035\231\001\002\000\004\041\232\001" +
    "\002\000\004\042\233\001\002\000\004\061\234\001\002" +
    "\000\004\010\235\001\002\000\004\011\236\001\002\000" +
    "\054\005\uffec\007\uffec\011\uffec\012\uffec\020\uffec\025\uffec" +
    "\026\uffec\031\uffec\052\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\001\002\000\054\005\075\007\065\011" +
    "\063\012\240\020\062\025\055\026\054\031\077\052\071" +
    "\054\052\055\100\056\101\057\073\060\070\061\066\062" +
    "\060\063\074\064\072\065\076\066\061\067\067\001\002" +
    "\000\004\012\ufffc\001\002\000\004\012\242\001\002\000" +
    "\006\002\ufffb\037\ufffb\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\010\001\001" +
    "\000\002\001\001\000\004\031\011\001\001\000\004\030" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\016\001\001\000\010\016\027\017" +
    "\017\024\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\042\021\041\022\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\042\021" +
    "\216\001\001\000\002\001\001\000\004\020\047\001\001" +
    "\000\010\016\027\017\017\026\050\001\001\000\010\007" +
    "\056\010\063\025\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\203\001\001\000" +
    "\004\007\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\163\001" +
    "\001\000\002\001\001\000\004\007\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\102" +
    "\001\001\000\002\001\001\000\004\007\130\001\001\000" +
    "\004\007\127\001\001\000\004\007\126\001\001\000\004" +
    "\007\125\001\001\000\004\007\124\001\001\000\004\007" +
    "\123\001\001\000\004\007\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\115\011\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\146\001\001\000\002\001\001\000\004\007\150\001\001" +
    "\000\002\001\001\000\004\007\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\056" +
    "\025\052\001\001\000\002\001\001\000\004\007\166\001" +
    "\001\000\002\001\001\000\006\007\056\025\170\001\001" +
    "\000\002\001\001\000\006\007\056\025\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\115\011\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\205\001\001\000\002\001" +
    "\001\000\006\007\056\025\207\001\001\000\002\001\001" +
    "\000\004\007\211\001\001\000\002\001\001\000\004\007" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\236\001\001\000\006\007\056\025\052\001\001" +
    "\000\004\036\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.lexeme );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // identifier ::= ID 
            {
              IdLiteral RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new IdLiteral(term.line, term.pos, term.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("identifier",26, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // identifier ::= 
            {
              IdLiteral RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("identifier",26, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= ID 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new IdLiteral(term.line, term.pos, term.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp DOT ID LPAREN expList RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> args = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = new CallExp(id.line, id.pos, e, id.lexeme,args);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= THIS 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ThisLiteral(term.line, term.pos, term.lexeme, term.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp LT exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new LtExp(term.line, term.pos, e1,e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		RESULT = new NewExp(term.line, term.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ToneLiteral(term.line, term.pos, term.lexeme, term.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ColorLiteral(term.line, term.pos, term.lexeme, term.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ButtonLiteral(term.line, term.pos, term.lexeme, term.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(term.line, term.pos, term.lexeme, term.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new FalseLiteral(term.line, term.pos, term.lexeme, term.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new TrueLiteral(term.line, term.pos, term.lexeme, term.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(term.line, term.pos,e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = e;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(term.line, term.pos,e);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new NotExp(term.line, term.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = new MeggyGetPixel(term.line, term.pos, e1,e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = new MeggyCheckButton(term.line, term.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new EqualExp(term.line, term.pos, e1,e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new AndExp(term.line, term.pos, e1,e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new PlusExp(term.line, term.pos, e1,e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new MinusExp(term.line, term.pos, e1,e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new MulExp(term.line, term.pos, e1,e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expList ::= 
            {
              LinkedList<IExp> RESULT =null;
		 RESULT = new LinkedList<IExp>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expList",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expList ::= expList COMMA exp 
            {
              LinkedList<IExp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp s = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(s!=null) {list.add(s);/**/} RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expList",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expList ::= exp 
            {
              LinkedList<IExp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp s = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 LinkedList<IExp> list = new LinkedList<IExp>();
	       if(s!=null) {list.add(s);/**/}
	        RESULT = list;
	        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expList",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ToneType(t.line,t.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= VOID 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new VoidType(t.line,t.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= INT 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new IntType(t.line,t.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ColorType(t.line,t.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ButtonType(t.line,t.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new BoolType(t.line,t.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= BYTE 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ByteType(t.line,t.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= exp DOT ID LPAREN expList RPAREN SEMI 
            {
              IStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> args = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		RESULT = new CallStatement(id.line, id.pos, e, id.lexeme,args);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyToneStart(term.line, term.pos,e1,e2 );
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(term.line, term.pos,e,s );
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(term.line, term.pos,e,s1,s2);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(term.line, term.pos,e,s,null);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyDelay(term.line, term.pos,e);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetPixel(term.line, term.pos,e1,e2,e3 );
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue term = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new BlockStatement(term.line, term.pos, list);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= 
            {
              LinkedList<IStatement> RESULT =null;
		 RESULT = new LinkedList<IStatement>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",20, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement_list statement 
            {
              LinkedList<IStatement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(s!=null) {list.add(s);/**/} RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",20, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDecl ::= type ID SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("varDecl",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varDeclList ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		 RESULT = new LinkedList<VarDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("varDeclList",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<VarDecl> list = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		VarDecl s = (VarDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(s!=null) {list.add(s);/**/} RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("varDeclList",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new Formal(id.line, id.pos, t, id.lexeme);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",15, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalList ::= 
            {
              LinkedList<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formalList",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalList ::= formalList COMMA formal 
            {
              LinkedList<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal s = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(s!=null) {list.add(s);/**/} RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formalList",16, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formalList ::= formal 
            {
              LinkedList<Formal> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal s = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 LinkedList<Formal> list = new LinkedList<Formal>();
	       if(s!=null) {list.add(s);/**/}
	        RESULT = list;
	        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formalList",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // returnStatment ::= 
            {
              IExp RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("returnStatment",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // returnStatment ::= RETURN exp SEMI 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = e;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("returnStatment",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methodDecl ::= PUBLIC type ID LPAREN formalList RPAREN LBRACE varDeclList statement_list returnStatment RBRACE 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		LinkedList<Formal> formals = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IStatement> stmts = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp ret = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        if(ret != null){
            RESULT = new MethodDecl(id.line, id.pos, t, id.lexeme, formals, vars, stmts,ret);
        }else{
            RESULT = new MethodDecl(id.line, id.pos, t, id.lexeme, formals, vars, stmts);
        }


        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDecl",17, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methodDeclList ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		 RESULT = new LinkedList<MethodDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDeclList",18, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methodDeclList ::= methodDeclList methodDecl 
            {
              LinkedList<MethodDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> list = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl d = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(d!=null) {list.add(d);} RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDeclList",18, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classDecl ::= CLASS ID LBRACE varDeclList methodDeclList RBRACE 
            {
              TopClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new TopClassDecl(id.line,id.pos,id.lexeme, vars, methods);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("classDecl",22, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE statement_list RBRACE NT$1 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-17)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		


          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",21, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-15)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;

          System.out.println(list);
			/*for(IStatement a : list){System.out.println(a);}*/
			RESULT = new MainClass(name.line, name.pos, name.lexeme,param.lexeme, new BlockStatement(name.line, name.pos, list));
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

			      //System.out.println(name);
            java.io.PrintStream sout
                    = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);
                //parser.out.println
                if(!(name+".java").equals(parser.programName)){
                    System.err.println("Class name "+name+" is not the same as the file name "+parser.programName.replace(".java", ""));
                    System.exit(0);
                }
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		 RESULT = new LinkedList<IClassDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_list",23, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class_list classDecl 
            {
              LinkedList<IClassDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IClassDecl> list = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl d = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(d!=null) {list.add((IClassDecl)d);} RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_list",23, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class class_list 
            {
              Object RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass main = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> list = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
     RESULT = new Program(main.getLine() ,main.getPos() , main, list);
     
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

